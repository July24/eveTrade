<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eve.dao.MarketgroupsMapper">
  <resultMap id="BaseResultMap" type="com.eve.entity.database.Marketgroups">
    <id column="marketGroupID" jdbcType="INTEGER" property="marketgroupid" />
    <result column="descriptionID" jdbcType="VARCHAR" property="descriptionid" />
    <result column="hasTypes" jdbcType="VARCHAR" property="hastypes" />
    <result column="iconID" jdbcType="VARCHAR" property="iconid" />
    <result column="nameID" jdbcType="VARCHAR" property="nameid" />
    <result column="parentGroupID" jdbcType="INTEGER" property="parentgroupid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    marketGroupID, descriptionID, hasTypes, iconID, nameID, parentGroupID
  </sql>
  <select id="selectByExample" parameterType="com.eve.entity.database.MarketgroupsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from marketgroups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from marketgroups
    where marketGroupID = #{marketgroupid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from marketgroups
    where marketGroupID = #{marketgroupid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.eve.entity.database.MarketgroupsExample">
    delete from marketgroups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.eve.entity.database.Marketgroups">
    insert into marketgroups (marketGroupID, descriptionID, hasTypes, 
      iconID, nameID, parentGroupID
      )
    values (#{marketgroupid,jdbcType=INTEGER}, #{descriptionid,jdbcType=VARCHAR}, #{hastypes,jdbcType=VARCHAR}, 
      #{iconid,jdbcType=VARCHAR}, #{nameid,jdbcType=VARCHAR}, #{parentgroupid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.eve.entity.database.Marketgroups">
    insert into marketgroups
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="marketgroupid != null">
        marketGroupID,
      </if>
      <if test="descriptionid != null">
        descriptionID,
      </if>
      <if test="hastypes != null">
        hasTypes,
      </if>
      <if test="iconid != null">
        iconID,
      </if>
      <if test="nameid != null">
        nameID,
      </if>
      <if test="parentgroupid != null">
        parentGroupID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="marketgroupid != null">
        #{marketgroupid,jdbcType=INTEGER},
      </if>
      <if test="descriptionid != null">
        #{descriptionid,jdbcType=VARCHAR},
      </if>
      <if test="hastypes != null">
        #{hastypes,jdbcType=VARCHAR},
      </if>
      <if test="iconid != null">
        #{iconid,jdbcType=VARCHAR},
      </if>
      <if test="nameid != null">
        #{nameid,jdbcType=VARCHAR},
      </if>
      <if test="parentgroupid != null">
        #{parentgroupid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.eve.entity.database.MarketgroupsExample" resultType="java.lang.Long">
    select count(*) from marketgroups
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update marketgroups
    <set>
      <if test="record.marketgroupid != null">
        marketGroupID = #{record.marketgroupid,jdbcType=INTEGER},
      </if>
      <if test="record.descriptionid != null">
        descriptionID = #{record.descriptionid,jdbcType=VARCHAR},
      </if>
      <if test="record.hastypes != null">
        hasTypes = #{record.hastypes,jdbcType=VARCHAR},
      </if>
      <if test="record.iconid != null">
        iconID = #{record.iconid,jdbcType=VARCHAR},
      </if>
      <if test="record.nameid != null">
        nameID = #{record.nameid,jdbcType=VARCHAR},
      </if>
      <if test="record.parentgroupid != null">
        parentGroupID = #{record.parentgroupid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update marketgroups
    set marketGroupID = #{record.marketgroupid,jdbcType=INTEGER},
      descriptionID = #{record.descriptionid,jdbcType=VARCHAR},
      hasTypes = #{record.hastypes,jdbcType=VARCHAR},
      iconID = #{record.iconid,jdbcType=VARCHAR},
      nameID = #{record.nameid,jdbcType=VARCHAR},
      parentGroupID = #{record.parentgroupid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.eve.entity.database.Marketgroups">
    update marketgroups
    <set>
      <if test="descriptionid != null">
        descriptionID = #{descriptionid,jdbcType=VARCHAR},
      </if>
      <if test="hastypes != null">
        hasTypes = #{hastypes,jdbcType=VARCHAR},
      </if>
      <if test="iconid != null">
        iconID = #{iconid,jdbcType=VARCHAR},
      </if>
      <if test="nameid != null">
        nameID = #{nameid,jdbcType=VARCHAR},
      </if>
      <if test="parentgroupid != null">
        parentGroupID = #{parentgroupid,jdbcType=INTEGER},
      </if>
    </set>
    where marketGroupID = #{marketgroupid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eve.entity.database.Marketgroups">
    update marketgroups
    set descriptionID = #{descriptionid,jdbcType=VARCHAR},
      hasTypes = #{hastypes,jdbcType=VARCHAR},
      iconID = #{iconid,jdbcType=VARCHAR},
      nameID = #{nameid,jdbcType=VARCHAR},
      parentGroupID = #{parentgroupid,jdbcType=INTEGER}
    where marketGroupID = #{marketgroupid,jdbcType=INTEGER}
  </update>
</mapper>